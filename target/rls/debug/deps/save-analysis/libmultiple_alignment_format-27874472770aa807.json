{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8","program":"C:\\Users\\feder\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","multiple_alignment_format","C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=27874472770aa807","-C","extra-filename=-27874472770aa807","--out-dir","c:\\Users\\feder\\OneDrive\\Unimib\\Stage\\variation_graph\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\feder\\OneDrive\\Unimib\\Stage\\variation_graph\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\feder\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\feder\\OneDrive\\Unimib\\Stage\\variation_graph\\target\\rls\\debug\\deps\\libmultiple_alignment_format-27874472770aa807.rmeta"},"prelude":{"crate_id":{"name":"multiple_alignment_format","disambiguator":[11921458818212618742,4585747269700523254]},"crate_root":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src","external_crates":[{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2134305066550747688,1377703208702874155]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1322159461575500717,8297198428669169011]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2376346800744392852,12342541482992122530]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14946502858004023242,6637215598610016319]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5305136910335682758,6890491777619641650]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8079093424489733033,9678018066858265018]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8191054904896780843,65190916132359678]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17454577518104061478,8473922882117178851]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14702801963282246562,3385633331338644346]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4483555191844012602,617965746000623535]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6496369475756502088,8603909216288097824]}},{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[8790568169648576788,8899032378407077408]}}],"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":0,"byte_end":5694,"line_start":1,"line_end":155,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":0,"byte_end":5694,"line_start":1,"line_end":155,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":55},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":98},{"krate":0,"index":112},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":114},{"krate":0,"index":124},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":126},{"krate":0,"index":142},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":133},{"krate":0,"index":144},{"krate":0,"index":162},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":153},{"krate":0,"index":164},{"krate":0,"index":182},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":174},{"krate":0,"index":172},{"krate":0,"index":170},{"krate":0,"index":169},{"krate":0,"index":184},{"krate":0,"index":198},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":189},{"krate":0,"index":200},{"krate":0,"index":221},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":213},{"krate":0,"index":223},{"krate":0,"index":239},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":230},{"krate":0,"index":241},{"krate":0,"index":260},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":252},{"krate":0,"index":72}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parser","qualname":"::parser","value":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":19},{"krate":0,"index":79},{"krate":0,"index":96},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":46},{"krate":0,"index":53}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":5940,"byte_end":5948,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"LinesRef","qualname":"::parser::LinesRef","value":"LinesRef {  }","parent":null,"children":[{"krate":0,"index":18}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6602,"byte_end":6609,"line_start":41,"line_end":41,"column_start":5,"column_end":12},"name":"IOError","qualname":"::parser::MAFParseError::IOError","value":"MAFParseError::IOError(io::Error)","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6626,"byte_end":6640,"line_start":42,"line_end":42,"column_start":5,"column_end":19},"name":"UnexpectedLine","qualname":"::parser::MAFParseError::UnexpectedLine","value":"MAFParseError::UnexpectedLine(String)","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6654,"byte_end":6665,"line_start":43,"line_end":43,"column_start":5,"column_end":16},"name":"BadMetadata","qualname":"::parser::MAFParseError::BadMetadata","value":"MAFParseError::BadMetadata","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6671,"byte_end":6682,"line_start":44,"line_end":44,"column_start":5,"column_end":16},"name":"BadLineType","qualname":"::parser::MAFParseError::BadLineType","value":"MAFParseError::BadLineType(String)","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6696,"byte_end":6700,"line_start":45,"line_end":45,"column_start":5,"column_end":9},"name":"Misc","qualname":"::parser::MAFParseError::Misc","value":"MAFParseError::Misc(&'static str)","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6720,"byte_end":6723,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"EOF","qualname":"::parser::MAFParseError::EOF","value":"MAFParseError::EOF","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6582,"byte_end":6595,"line_start":40,"line_end":40,"column_start":10,"column_end":23},"name":"MAFParseError","qualname":"::parser::MAFParseError","value":"pub enum MAFParseError {\n    IOError(io::Error),\n    UnexpectedLine(String),\n    BadMetadata,\n    BadLineType(String),\n    Misc(&'static str),\n    EOF,\n}","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6902,"byte_end":6915,"line_start":56,"line_end":56,"column_start":8,"column_end":21},"name":"next_maf_item","qualname":"::parser::next_maf_item","value":"pub fn next_maf_item<T: io::BufRead + ?Sized>(&mut T)\n-> Result<MAFItem, MAFParseError>","parent":null,"children":[],"decl_id":null,"docs":" Get the next MAFItem out of the input.\n","sig":null,"attributes":[{"value":"/ Get the next MAFItem out of the input.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6852,"byte_end":6894,"line_start":55,"line_end":55,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":13650,"byte_end":13661,"line_start":222,"line_end":222,"column_start":8,"column_end":19},"name":"parse_block","qualname":"::parser::parse_block","value":"pub fn parse_block<impl Iterator<Item = Result<String, io::Error>>: Iterator<Item\n                   =\n                   Result<String,\n                          io::Error>>>(String,\n                                       impl Iterator<Item = Result<String, io::Error>>)\n-> Result<MAFBlock, MAFParseError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\output.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"output","qualname":"::output","value":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\output.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":237,"byte_end":242,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"name":"Block","qualname":"::MAFItem::Block","value":"MAFItem::Block(MAFBlock)","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":258,"byte_end":265,"line_start":13,"line_end":13,"column_start":5,"column_end":12},"name":"Comment","qualname":"::MAFItem::Comment","value":"MAFItem::Comment(String)","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":223,"byte_end":230,"line_start":11,"line_end":11,"column_start":10,"column_end":17},"name":"MAFItem","qualname":"::MAFItem","value":"pub enum MAFItem { Block(MAFBlock), Comment(String), }","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":102}],"decl_id":null,"docs":" Structure representing a MAF item (comment or block).\n","sig":null,"attributes":[{"value":"/ Structure representing a MAF item (comment or block).","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":124,"byte_end":181,"line_start":9,"line_end":9,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":348,"byte_end":356,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"MAFBlock","qualname":"::MAFBlock","value":"MAFBlock { entries, metadata }","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"decl_id":null,"docs":" A MAF alignment block.\n","sig":null,"attributes":[{"value":"/ A MAF alignment block.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":278,"byte_end":304,"line_start":16,"line_end":16,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":367,"byte_end":374,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"name":"entries","qualname":"::MAFBlock::entries","value":"std::vec::Vec<MAFBlockEntry>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":404,"byte_end":412,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"name":"metadata","qualname":"::MAFBlock::metadata","value":"std::collections::BTreeMap<std::string::String, std::string::String>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":511,"byte_end":523,"line_start":25,"line_end":25,"column_start":5,"column_end":17},"name":"AlignedEntry","qualname":"::MAFBlockEntry::AlignedEntry","value":"MAFBlockEntry::AlignedEntry(MAFBlockAlignedEntry)","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":551,"byte_end":565,"line_start":26,"line_end":26,"column_start":5,"column_end":19},"name":"UnalignedEntry","qualname":"::MAFBlockEntry::UnalignedEntry","value":"MAFBlockEntry::UnalignedEntry(MAFBlockUnalignedEntry)","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":491,"byte_end":504,"line_start":24,"line_end":24,"column_start":10,"column_end":23},"name":"MAFBlockEntry","qualname":"::MAFBlockEntry","value":"pub enum MAFBlockEntry {\n    AlignedEntry(MAFBlockAlignedEntry),\n    UnalignedEntry(MAFBlockUnalignedEntry),\n}","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":130}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":774,"byte_end":794,"line_start":32,"line_end":32,"column_start":12,"column_end":32},"name":"MAFBlockAlignedEntry","qualname":"::MAFBlockAlignedEntry","value":"MAFBlockAlignedEntry { alignment, seq, start, aligned_length, sequence_size, strand, context, qualities }","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"decl_id":null,"docs":" An alignment entry within a MAF block. Corresponds to the \"s\"\n line, as well as the \"i\" and \"q\" lines if they are present.\n","sig":null,"attributes":[{"value":"/ An alignment entry within a MAF block. Corresponds to the \"s\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":594,"byte_end":659,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/ line, as well as the \"i\" and \"q\" lines if they are present.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":660,"byte_end":723,"line_start":30,"line_end":30,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":867,"byte_end":876,"line_start":34,"line_end":34,"column_start":9,"column_end":18},"name":"alignment","qualname":"::MAFBlockAlignedEntry::alignment","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Actual sequence of bases/amino acids, including gaps.\n","sig":null,"attributes":[{"value":"/ Actual sequence of bases/amino acids, including gaps.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":801,"byte_end":858,"line_start":33,"line_end":33,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":922,"byte_end":925,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"seq","qualname":"::MAFBlockAlignedEntry::seq","value":"std::string::String","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" The sequence name.\n","sig":null,"attributes":[{"value":"/ The sequence name.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":891,"byte_end":913,"line_start":35,"line_end":35,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1001,"byte_end":1006,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"start","qualname":"::MAFBlockAlignedEntry::start","value":"u64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Start of the aligned region within this sequence.\n","sig":null,"attributes":[{"value":"/ Start of the aligned region within this sequence.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":939,"byte_end":992,"line_start":37,"line_end":37,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1080,"byte_end":1094,"line_start":40,"line_end":40,"column_start":9,"column_end":23},"name":"aligned_length","qualname":"::MAFBlockAlignedEntry::aligned_length","value":"u64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Length of the aligned region (not including gaps).\n","sig":null,"attributes":[{"value":"/ Length of the aligned region (not including gaps).","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1017,"byte_end":1071,"line_start":39,"line_end":39,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1203,"byte_end":1216,"line_start":43,"line_end":43,"column_start":9,"column_end":22},"name":"sequence_size","qualname":"::MAFBlockAlignedEntry::sequence_size","value":"u64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" The total length of this sequence (including regions outside\n this alignment).\n","sig":null,"attributes":[{"value":"/ The total length of this sequence (including regions outside","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1105,"byte_end":1169,"line_start":41,"line_end":41,"column_start":5,"column_end":69}},{"value":"/ this alignment).","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1174,"byte_end":1194,"line_start":42,"line_end":42,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1280,"byte_end":1286,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"name":"strand","qualname":"::MAFBlockAlignedEntry::strand","value":"Strand","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Which strand the aligned sequence is on.\n","sig":null,"attributes":[{"value":"/ Which strand the aligned sequence is on.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1227,"byte_end":1271,"line_start":44,"line_end":44,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1403,"byte_end":1410,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"context","qualname":"::MAFBlockAlignedEntry::context","value":"std::option::Option<AlignedContext>","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Context about what's happening before or after the alignment\n within this sequence.\n","sig":null,"attributes":[{"value":"/ Context about what's happening before or after the alignment","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1300,"byte_end":1364,"line_start":46,"line_end":46,"column_start":5,"column_end":69}},{"value":"/ within this sequence.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1369,"byte_end":1394,"line_start":47,"line_end":47,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1591,"byte_end":1600,"line_start":52,"line_end":52,"column_start":9,"column_end":18},"name":"qualities","qualname":"::MAFBlockAlignedEntry::qualities","value":"std::option::Option<std::vec::Vec<u8>>","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Optional scores indicating the alignment quality for each\n base, ranging from 0-100. No one uses this as far as I can\n tell.\n","sig":null,"attributes":[{"value":"/ Optional scores indicating the alignment quality for each","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1440,"byte_end":1501,"line_start":49,"line_end":49,"column_start":5,"column_end":66}},{"value":"/ base, ranging from 0-100. No one uses this as far as I can","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1506,"byte_end":1568,"line_start":50,"line_end":50,"column_start":5,"column_end":67}},{"value":"/ tell.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1573,"byte_end":1582,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1744,"byte_end":1752,"line_start":58,"line_end":58,"column_start":5,"column_end":13},"name":"Positive","qualname":"::Strand::Positive","value":"Strand::Positive","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1758,"byte_end":1766,"line_start":59,"line_end":59,"column_start":5,"column_end":13},"name":"Negative","qualname":"::Strand::Negative","value":"Strand::Negative","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1731,"byte_end":1737,"line_start":57,"line_end":57,"column_start":10,"column_end":16},"name":"Strand","qualname":"::Strand","value":"pub enum Strand { Positive, Negative, }","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":167}],"decl_id":null,"docs":" Indicates one of the two strands.\n","sig":null,"attributes":[{"value":"/ Indicates one of the two strands.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1622,"byte_end":1659,"line_start":55,"line_end":55,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1854,"byte_end":1868,"line_start":64,"line_end":64,"column_start":12,"column_end":26},"name":"AlignedContext","qualname":"::AlignedContext","value":"AlignedContext { left_status, left_count, right_status, right_count }","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188}],"decl_id":null,"docs":" Corresponds to the \"i\" line.\n","sig":null,"attributes":[{"value":"/ Corresponds to the \"i\" line.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1771,"byte_end":1803,"line_start":62,"line_end":62,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1879,"byte_end":1890,"line_start":65,"line_end":65,"column_start":9,"column_end":20},"name":"left_status","qualname":"::AlignedContext::left_status","value":"AlignedContextStatus","parent":{"krate":0,"index":184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1922,"byte_end":1932,"line_start":66,"line_end":66,"column_start":9,"column_end":19},"name":"left_count","qualname":"::AlignedContext::left_count","value":"u64","parent":{"krate":0,"index":184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1947,"byte_end":1959,"line_start":67,"line_end":67,"column_start":9,"column_end":21},"name":"right_status","qualname":"::AlignedContext::right_status","value":"AlignedContextStatus","parent":{"krate":0,"index":184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":1991,"byte_end":2002,"line_start":68,"line_end":68,"column_start":9,"column_end":20},"name":"right_count","qualname":"::AlignedContext::right_count","value":"u64","parent":{"krate":0,"index":184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2210,"byte_end":2220,"line_start":75,"line_end":75,"column_start":5,"column_end":15},"name":"Contiguous","qualname":"::AlignedContextStatus::Contiguous","value":"AlignedContextStatus::Contiguous","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Corresponds to \"C\" in the original MAF line. \"The sequence\n before or after is contiguous with this block.\"\n","sig":null,"attributes":[{"value":"/ Corresponds to \"C\" in the original MAF line. \"The sequence","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2087,"byte_end":2149,"line_start":73,"line_end":73,"column_start":5,"column_end":67}},{"value":"/ before or after is contiguous with this block.\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2154,"byte_end":2205,"line_start":74,"line_end":74,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2377,"byte_end":2386,"line_start":79,"line_end":79,"column_start":5,"column_end":14},"name":"Insertion","qualname":"::AlignedContextStatus::Insertion","value":"AlignedContextStatus::Insertion","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Corresponds to \"I\" in the original MAF line. \"There are bases\n between the bases in this block and the one before or after\n it.\"\n","sig":null,"attributes":[{"value":"/ Corresponds to \"I\" in the original MAF line. \"There are bases","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2226,"byte_end":2291,"line_start":76,"line_end":76,"column_start":5,"column_end":70}},{"value":"/ between the bases in this block and the one before or after","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2296,"byte_end":2359,"line_start":77,"line_end":77,"column_start":5,"column_end":68}},{"value":"/ it.\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2364,"byte_end":2372,"line_start":78,"line_end":78,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2515,"byte_end":2530,"line_start":82,"line_end":82,"column_start":5,"column_end":20},"name":"FirstInSequence","qualname":"::AlignedContextStatus::FirstInSequence","value":"AlignedContextStatus::FirstInSequence","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Corresponds to \"N\" in the original MAF line. \"This is the\n first sequence from this src chrom or scaffold.\"\n","sig":null,"attributes":[{"value":"/ Corresponds to \"N\" in the original MAF line. \"This is the","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2392,"byte_end":2453,"line_start":80,"line_end":80,"column_start":5,"column_end":66}},{"value":"/ first sequence from this src chrom or scaffold.\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2458,"byte_end":2510,"line_start":81,"line_end":81,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2749,"byte_end":2771,"line_start":87,"line_end":87,"column_start":5,"column_end":27},"name":"FirstInSequenceBridged","qualname":"::AlignedContextStatus::FirstInSequenceBridged","value":"AlignedContextStatus::FirstInSequenceBridged","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Corresponds to \"n\" in the original MAF line. \"This is the\n first sequence from this src chrom or scaffold but it is\n bridged by another alignment from a different chrom or\n scaffold.\"\n","sig":null,"attributes":[{"value":"/ Corresponds to \"n\" in the original MAF line. \"This is the","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2536,"byte_end":2597,"line_start":83,"line_end":83,"column_start":5,"column_end":66}},{"value":"/ first sequence from this src chrom or scaffold but it is","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2602,"byte_end":2662,"line_start":84,"line_end":84,"column_start":5,"column_end":65}},{"value":"/ bridged by another alignment from a different chrom or","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2667,"byte_end":2725,"line_start":85,"line_end":85,"column_start":5,"column_end":63}},{"value":"/ scaffold.\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2730,"byte_end":2744,"line_start":86,"line_end":86,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2911,"byte_end":2922,"line_start":90,"line_end":90,"column_start":5,"column_end":16},"name":"MissingData","qualname":"::AlignedContextStatus::MissingData","value":"AlignedContextStatus::MissingData","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Corresponds to \"M\" in the original MAF line. \"There is missing\n data before or after this block (Ns in the sequence).\"\n","sig":null,"attributes":[{"value":"/ Corresponds to \"M\" in the original MAF line. \"There is missing","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2777,"byte_end":2843,"line_start":88,"line_end":88,"column_start":5,"column_end":71}},{"value":"/ data before or after this block (Ns in the sequence).\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2848,"byte_end":2906,"line_start":89,"line_end":89,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3098,"byte_end":3109,"line_start":94,"line_end":94,"column_start":5,"column_end":16},"name":"AlreadyUsed","qualname":"::AlignedContextStatus::AlreadyUsed","value":"AlignedContextStatus::AlreadyUsed","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Corresponds to \"T\" in the original MAF line. \"The sequence in\n this block has been used before in a previous block (likely a\n tandem duplication).\"\n","sig":null,"attributes":[{"value":"/ Corresponds to \"T\" in the original MAF line. \"The sequence in","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2928,"byte_end":2993,"line_start":91,"line_end":91,"column_start":5,"column_end":70}},{"value":"/ this block has been used before in a previous block (likely a","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2998,"byte_end":3063,"line_start":92,"line_end":92,"column_start":5,"column_end":70}},{"value":"/ tandem duplication).\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3068,"byte_end":3093,"line_start":93,"line_end":93,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":2060,"byte_end":2080,"line_start":72,"line_end":72,"column_start":10,"column_end":30},"name":"AlignedContextStatus","qualname":"::AlignedContextStatus","value":"pub enum AlignedContextStatus {\n\n    /// Corresponds to \"C\" in the original MAF line. \"The sequence\n    /// before or after is contiguous with this block.\"\n    Contiguous,\n\n    /// Corresponds to \"I\" in the original MAF line. \"There are bases\n    /// between the bases in this block and the one before or after\n    /// it.\"\n    Insertion,\n\n    /// Corresponds to \"N\" in the original MAF line. \"This is the\n    /// first sequence from this src chrom or scaffold.\"\n    FirstInSequence,\n\n    /// Corresponds to \"n\" in the original MAF line. \"This is the\n    /// first sequence from this src chrom or scaffold but it is\n    /// bridged by another alignment from a different chrom or\n    /// scaffold.\"\n    FirstInSequenceBridged,\n\n    /// Corresponds to \"M\" in the original MAF line. \"There is missing\n    /// data before or after this block (Ns in the sequence).\"\n    MissingData,\n\n    /// Corresponds to \"T\" in the original MAF line. \"The sequence in\n    /// this block has been used before in a previous block (likely a\n    /// tandem duplication).\"\n    AlreadyUsed,\n}","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3313,"byte_end":3335,"line_start":101,"line_end":101,"column_start":12,"column_end":34},"name":"MAFBlockUnalignedEntry","qualname":"::MAFBlockUnalignedEntry","value":"MAFBlockUnalignedEntry { seq, start, size, strand, sequence_size, status }","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229}],"decl_id":null,"docs":" Indicates that the entry is unaligned, but there is a chain\n \"bridging\" two alignment blocks on either side. Corresponds to the\n \"e\" line.\n","sig":null,"attributes":[{"value":"/ Indicates that the entry is unaligned, but there is a chain","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3114,"byte_end":3177,"line_start":97,"line_end":97,"column_start":1,"column_end":64}},{"value":"/ \"bridging\" two alignment blocks on either side. Corresponds to the","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3178,"byte_end":3248,"line_start":98,"line_end":98,"column_start":1,"column_end":71}},{"value":"/ \"e\" line.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3249,"byte_end":3262,"line_start":99,"line_end":99,"column_start":1,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3346,"byte_end":3349,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"name":"seq","qualname":"::MAFBlockUnalignedEntry::seq","value":"std::string::String","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3406,"byte_end":3411,"line_start":104,"line_end":104,"column_start":9,"column_end":14},"name":"start","qualname":"::MAFBlockUnalignedEntry::start","value":"u64","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Start of the unaligned region.\n","sig":null,"attributes":[{"value":"/ Start of the unaligned region.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3363,"byte_end":3397,"line_start":103,"line_end":103,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3464,"byte_end":3468,"line_start":106,"line_end":106,"column_start":9,"column_end":13},"name":"size","qualname":"::MAFBlockUnalignedEntry::size","value":"u64","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Size of the unaligned region.\n","sig":null,"attributes":[{"value":"/ Size of the unaligned region.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3422,"byte_end":3455,"line_start":105,"line_end":105,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3554,"byte_end":3560,"line_start":108,"line_end":108,"column_start":9,"column_end":15},"name":"strand","qualname":"::MAFBlockUnalignedEntry::strand","value":"Strand","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Strand aligned to by the chain bridging this unaligned region.\n","sig":null,"attributes":[{"value":"/ Strand aligned to by the chain bridging this unaligned region.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3479,"byte_end":3545,"line_start":107,"line_end":107,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3615,"byte_end":3628,"line_start":110,"line_end":110,"column_start":9,"column_end":22},"name":"sequence_size","qualname":"::MAFBlockUnalignedEntry::sequence_size","value":"u64","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Size of the entire sequence.\n","sig":null,"attributes":[{"value":"/ Size of the entire sequence.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3574,"byte_end":3606,"line_start":109,"line_end":109,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3732,"byte_end":3738,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"name":"status","qualname":"::MAFBlockUnalignedEntry::status","value":"UnalignedContextStatus","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" The relationship between this unaligned region and the\n bridging regions.\n","sig":null,"attributes":[{"value":"/ The relationship between this unaligned region and the","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3639,"byte_end":3697,"line_start":111,"line_end":111,"column_start":5,"column_end":63}},{"value":"/ bridging regions.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3702,"byte_end":3723,"line_start":112,"line_end":112,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4121,"byte_end":4129,"line_start":122,"line_end":122,"column_start":5,"column_end":13},"name":"Deletion","qualname":"::UnalignedContextStatus::Deletion","value":"UnalignedContextStatus::Deletion","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" \"C\" in the original MAF line. \"The sequence before and after\n is contiguous implying that this region was either deleted in\n the source or inserted in the reference sequence. The browser\n draws a single line or a \"-\" in base mode in these blocks.\"\n","sig":null,"attributes":[{"value":"/ \"C\" in the original MAF line. \"The sequence before and after","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3844,"byte_end":3908,"line_start":118,"line_end":118,"column_start":5,"column_end":69}},{"value":"/ is contiguous implying that this region was either deleted in","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3913,"byte_end":3978,"line_start":119,"line_end":119,"column_start":5,"column_end":70}},{"value":"/ the source or inserted in the reference sequence. The browser","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3983,"byte_end":4048,"line_start":120,"line_end":120,"column_start":5,"column_end":70}},{"value":"/ draws a single line or a \"-\" in base mode in these blocks.\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4053,"byte_end":4116,"line_start":121,"line_end":121,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4365,"byte_end":4374,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"name":"Insertion","qualname":"::UnalignedContextStatus::Insertion","value":"UnalignedContextStatus::Insertion","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" \"I\" in the original MAF line. \"There are non-aligning bases in\n the source species between chained alignment blocks before and\n after this block. The browser shows a double line or \"=\" in\n base mode.\"\n","sig":null,"attributes":[{"value":"/ \"I\" in the original MAF line. \"There are non-aligning bases in","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4135,"byte_end":4201,"line_start":123,"line_end":123,"column_start":5,"column_end":71}},{"value":"/ the source species between chained alignment blocks before and","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4206,"byte_end":4272,"line_start":124,"line_end":124,"column_start":5,"column_end":71}},{"value":"/ after this block. The browser shows a double line or \"=\" in","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4277,"byte_end":4340,"line_start":125,"line_end":125,"column_start":5,"column_end":68}},{"value":"/ base mode.\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4345,"byte_end":4360,"line_start":126,"line_end":126,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4564,"byte_end":4575,"line_start":131,"line_end":131,"column_start":5,"column_end":16},"name":"MissingData","qualname":"::UnalignedContextStatus::MissingData","value":"UnalignedContextStatus::MissingData","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" \"M\" in the original MAF line. \"There are non-aligning bases in\n the source and more than 90% of them are Ns in the source. The\n browser shows a pale yellow bar.\"\n","sig":null,"attributes":[{"value":"/ \"M\" in the original MAF line. \"There are non-aligning bases in","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4380,"byte_end":4446,"line_start":128,"line_end":128,"column_start":5,"column_end":71}},{"value":"/ the source and more than 90% of them are Ns in the source. The","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4451,"byte_end":4517,"line_start":129,"line_end":129,"column_start":5,"column_end":71}},{"value":"/ browser shows a pale yellow bar.\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4522,"byte_end":4559,"line_start":130,"line_end":130,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4954,"byte_end":4965,"line_start":138,"line_end":138,"column_start":5,"column_end":16},"name":"NewSequence","qualname":"::UnalignedContextStatus::NewSequence","value":"UnalignedContextStatus::NewSequence","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" \"n\" in the original MAF line. \"There are non-aligning bases in\n the source and the next aligning block starts in a new\n chromosome or scaffold that is bridged by a chain between\n still other blocks. The browser shows either a single line or\n a double line based on how many bases are in the gap between\n the bridging alignments.\"\n","sig":null,"attributes":[{"value":"/ \"n\" in the original MAF line. \"There are non-aligning bases in","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4581,"byte_end":4647,"line_start":132,"line_end":132,"column_start":5,"column_end":71}},{"value":"/ the source and the next aligning block starts in a new","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4652,"byte_end":4710,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ chromosome or scaffold that is bridged by a chain between","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4715,"byte_end":4776,"line_start":134,"line_end":134,"column_start":5,"column_end":66}},{"value":"/ still other blocks. The browser shows either a single line or","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4781,"byte_end":4846,"line_start":135,"line_end":135,"column_start":5,"column_end":70}},{"value":"/ a double line based on how many bases are in the gap between","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4851,"byte_end":4915,"line_start":136,"line_end":136,"column_start":5,"column_end":69}},{"value":"/ the bridging alignments.\"","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4920,"byte_end":4949,"line_start":137,"line_end":137,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":5110,"byte_end":5121,"line_start":141,"line_end":141,"column_start":5,"column_end":16},"name":"AlreadyUsed","qualname":"::UnalignedContextStatus::AlreadyUsed","value":"UnalignedContextStatus::AlreadyUsed","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" \"T\" in the original MAF line. This isn't supposed to happen\n according to the docs, but MULTIZ seems to output it. Whatevs.\n","sig":null,"attributes":[{"value":"/ \"T\" in the original MAF line. This isn't supposed to happen","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":4971,"byte_end":5034,"line_start":139,"line_end":139,"column_start":5,"column_end":68}},{"value":"/ according to the docs, but MULTIZ seems to output it. Whatevs.","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":5039,"byte_end":5105,"line_start":140,"line_end":140,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":3815,"byte_end":3837,"line_start":117,"line_end":117,"column_start":10,"column_end":32},"name":"UnalignedContextStatus","qualname":"::UnalignedContextStatus","value":"pub enum UnalignedContextStatus {\n\n    /// \"C\" in the original MAF line. \"The sequence before and after\n    /// is contiguous implying that this region was either deleted in\n    /// the source or inserted in the reference sequence. The browser\n    /// draws a single line or a \"-\" in base mode in these blocks.\"\n    Deletion,\n\n    /// \"I\" in the original MAF line. \"There are non-aligning bases in\n    /// the source species between chained alignment blocks before and\n    /// after this block. The browser shows a double line or \"=\" in\n    /// base mode.\"\n    Insertion,\n\n    /// \"M\" in the original MAF line. \"There are non-aligning bases in\n    /// the source and more than 90% of them are Ns in the source. The\n    /// browser shows a pale yellow bar.\"\n    MissingData,\n\n    /// \"n\" in the original MAF line. \"There are non-aligning bases in\n    /// the source and the next aligning block starts in a new\n    /// chromosome or scaffold that is bridged by a chain between\n    /// still other blocks. The browser shows either a single line or\n    /// a double line based on how many bases are in the gap between\n    /// the bridging alignments.\"\n    NewSequence,\n\n    /// \"T\" in the original MAF line. This isn't supposed to happen\n    /// according to the docs, but MULTIZ seems to output it. Whatevs.\n    AlreadyUsed,\n}","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":5153,"byte_end":5168,"line_start":145,"line_end":145,"column_start":12,"column_end":27},"name":"aligned_entries","qualname":"<MAFBlock>::aligned_entries","value":"pub fn aligned_entries(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":5363,"byte_end":5378,"line_start":150,"line_end":150,"column_start":12,"column_end":27},"name":"entries_as_hash","qualname":"<MAFBlock>::entries_as_hash","value":"pub fn entries_as_hash(&Self) -> HashMap<&str, Vec<&MAFBlockAlignedEntry>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6023,"byte_end":6031,"line_start":18,"line_end":18,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6753,"byte_end":6766,"line_start":49,"line_end":49,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\output.rs","byte_start":22731,"byte_end":22739,"line_start":32,"line_end":32,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":5131,"byte_end":5139,"line_start":144,"line_end":144,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":56,"byte_end":62,"line_start":5,"line_end":5,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":72,"byte_end":78,"line_start":6,"line_end":6,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":55}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6023,"byte_end":6031,"line_start":18,"line_end":18,"column_start":39,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":15},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\parser.rs","byte_start":6753,"byte_end":6766,"line_start":49,"line_end":49,"column_start":26,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\output.rs","byte_start":22731,"byte_end":22739,"line_start":32,"line_end":32,"column_start":23,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":114},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\feder\\.cargo\\git\\checkouts\\maf_parser-d9ccd9cce78728b7\\a12a8b8\\src\\lib.rs","byte_start":5131,"byte_end":5139,"line_start":144,"line_end":144,"column_start":6,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":114},"to":{"krate":4294967295,"index":4294967295}}]}